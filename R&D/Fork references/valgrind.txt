==4140== Memcheck, a memory error detector
==4140== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==4140== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==4140== Command: ./Neon banque.ne
==4140== 
Bienvenue sur la programme de gestion de banque de monopoly. Voici la configuration initiale : 
Tapez move personne1 personne2 argent pour effectuer un transfert de personne 1 vers personne2 d'une somme de argent. 
Tapez see personne1 personne2 ... pour voir l'argent de personne1, personne2, ... 
Tapez give personne argent pour ajouter de l'argent à personne1 
Tapez addplayer nom argent_initial pour ajouter un joueur 
Tapez deleteplayer nom1 nom2 ... pour supprimer des joueurs 
Tapez exit pour quitter. 
fin eval

[Données précédentes chargées : "banque", "moi"] 
[Commandes précédentes lancées : ] 
-> calc 1+1
-> calc [1,2,3] + [4,5,6]
-> addplayer moi 50
 
-> calc 1+
fin eval
problème de eval
==4140== Invalid read of size 1
==4140==    at 0x123249: neo_dup (varlib.c:302)
==4140==    by 0x10C651: treeToList (main.c:188)
==4140==    by 0x10CEDD: evalAux (main.c:435)
==4140==    by 0x10E2B8: eval (main.c:966)
==4140==    by 0x10F22D: exec (main.c:1388)
==4140==    by 0x10E79D: exec (main.c:1130)
==4140==    by 0x10E562: execConditionBlock (main.c:1051)
==4140==    by 0x10ED99: exec (main.c:1273)
==4140==    by 0x10D731: evalAux (main.c:626)
==4140==    by 0x10E2B8: eval (main.c:966)
==4140==    by 0x10F22D: exec (main.c:1388)
==4140==    by 0x10E79D: exec (main.c:1130)
==4140==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==4140== 
==4140== 
==4140== Process terminating with default action of signal 11 (SIGSEGV)
==4140==  Access not within mapped region at address 0x8
==4140==    at 0x123249: neo_dup (varlib.c:302)
==4140==    by 0x10C651: treeToList (main.c:188)
==4140==    by 0x10CEDD: evalAux (main.c:435)
==4140==    by 0x10E2B8: eval (main.c:966)
==4140==    by 0x10F22D: exec (main.c:1388)
==4140==    by 0x10E79D: exec (main.c:1130)
==4140==    by 0x10E562: execConditionBlock (main.c:1051)
==4140==    by 0x10ED99: exec (main.c:1273)
==4140==    by 0x10D731: evalAux (main.c:626)
==4140==    by 0x10E2B8: eval (main.c:966)
==4140==    by 0x10F22D: exec (main.c:1388)
==4140==    by 0x10E79D: exec (main.c:1130)
==4140==  If you believe this happened as a result of a stack
==4140==  overflow in your program's main thread (unlikely but
==4140==  possible), you can try to increase the size of the
==4140==  main thread stack using the --main-stacksize= flag.
==4140==  The main thread stack size used in this run was 8388608.
==4140== 
==4140== HEAP SUMMARY:
==4140==     in use at exit: 120,660 bytes in 2,533 blocks
==4140==   total heap usage: 132,360 allocs, 129,827 frees, 9,372,001 bytes allocated
==4140== 
==4140== LEAK SUMMARY:
==4140==    definitely lost: 0 bytes in 0 blocks
==4140==    indirectly lost: 0 bytes in 0 blocks
==4140==      possibly lost: 0 bytes in 0 blocks
==4140==    still reachable: 120,660 bytes in 2,533 blocks
==4140==         suppressed: 0 bytes in 0 blocks
==4140== Rerun with --leak-check=full to see details of leaked memory
==4140== 
==4140== For lists of detected and suppressed errors, rerun with: -s
==4140== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Erreur de segmentation
